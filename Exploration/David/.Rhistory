for(j in (i+1):6){
var_g = var_g+2*(i-1)*(j-1)*cor_theta[i,j]
}
}
var_g
cor_theta
var_g <-0
for(i in 1:6){
var_g = var_g+(i-1)^2*var_theta[i]
}
var_g
cor_theta<- cor(theta_b)
cor_theta
for(i in 2:6){
var_g = var_g+(i-1)^2*var_theta[i]
}
var_g <-0
for(i in 2:6){
var_g = var_g+(i-1)^2*var_theta[i]
}
var_g
cor_theta[5,6]
for(i in 2:5){
for(j in (i+1):6){
var_g = var_g+2*(i-1)*(j-1)*cor_theta[i,j]
}
}
var_g
cor_theta<- cov(theta_b)
for(i in 2:5){
for(j in (i+1):6){
var_g = var_g+2*(i-1)*(j-1)*cor_theta[i,j]
}
}
var_g
cor_theta<- cov(theta_b)
cor_theta
var_g <-0
for(i in 2:6){
var_g = var_g+(i-1)^2*var_theta[i]
}
for(i in 2:5){
for(j in (i+1):6){
var_g = var_g+2*(i-1)*(j-1)*cor_theta[i,j]
}
}
var_g
beta_beta <-(1-mean_g)/var_g *(mean_g-mean_g^2-var_g)
mean_g <-0.525
beta_beta <-(1-mean_g)/var_g *(mean_g-mean_g^2-var_g)
beta_alpha <-mean_g/(1-mean_g) *beta_beta
beta_alpha/(beta_alph+beta_beta)
beta_alpha/(beta_alpha+beta_beta)
beta_alpha*beta_beta/(beta_alpha+beta_beta+1)/(beta_alpha+beta_beta)^2
?qbeta
qbeta(0.95,beta_alpha,beta_beta)
sample(c(0, 1,))
sample(c(0, 1,), size = 1)
sample(c(0, 1,), size = 1, prob = c(0.5, 0.5))
sample(c(0, 1), size = 1, prob = c(0.5, 0.5))
sample(c(0, 1), size = 1, prob = c(0.5, 0.5))
sample(c(0, 1), size = 1, prob = c(0.5, 0.5))
sample(c(0, 1), size = 1, prob = c(0.5, 0.5))
sample(c(0, 1), size = 1, prob = c(0.5, 0.5))
sample(c(0, 1), size = 1, prob = c(0.5, 0.5))
sample(c(0, 1), size = 1, prob = c(0.5, 0.5))
sample(c(0, 1), size = 1, prob = c(0.5, 0.5))
sample(c(0, 1), size = 1, prob = c(0.5, 0.5))
setwd("../data")
fev = read.table("wi-radon.csv",header=TRUE,sep = ",")
setwd("./data")
fev = read.table("wi-radon.csv",header=TRUE,sep = ",")
setwd("~/data")
setwd("~/Users/myuser/Desktop/679/midterm/data")
fev = read.table("./Data/wi-radon.csv",header=TRUE,sep = ",")
fev = read.table("./data/wi-radon.csv",header=TRUE,sep = ",")
fev = read.table("./wi-radon.csv",header=TRUE,sep = ",")
fev = read.table("../wi-radon.csv",header=TRUE,sep = ",")
fev = read.table(file=file.path("data", "wi-radon.csv"),header=TRUE,sep = ",")
fev = read.csv(file=file.path("data", "wi-radon.csv"),header=TRUE,sep = ",")
fev = read.csv(file=file.path( "wi-radon.csv"),header=TRUE,sep = ",")
fev = read.csv(file=file.path("data", "wi-radon.csv"),header=TRUE,sep = ",")
fev = read.csv(file="data\\wi-radon.csv"),header=TRUE,sep = ",")
fev = read.csv(file="data\\wi-radon.csv",header=TRUE,sep = ",")
getwd()
?file.choose
f <- file.choose()
traceback()
1#don't show the packages' info.
1#don't show the packages' info.
?sim
library(ggplot2)
y<-c(16,9,10, 13, 19,20, 18, 17, 35, 55)
other<-c(58,90,48, 57, 103,57, 86, 112, 273, 64)
n<- y+other
alpha <- seq(0.1,7.5,0.1)
beta <- seq(0.1,30,0.1)
f <-  function(a, b){
return( (a + b)^(-2.5) * prod(beta(a,b)^(-1) * beta(a+y, b+n-y)))
}
xcord = rep(alpha, times =length(beta))
ycord = rep(beta, each = length(alpha))
z_raw <- mapply(a=xcord,b=ycord,FUN=f)
z <- z_raw/sum(z_raw)
ggplot(, aes(xcord, ycord, z = z)) + geom_tile(aes(fill = z)) + stat_contour()+
scale_fill_gradient(low="gray", high="white")
index = sample(1:length(z), 1000, prob = z, replace = TRUE)
alpha_post = xcord[index]
beta_post = ycord[index]
plot(alpha_post, beta_post)
ggplot(,aes(alpha_post))+geom_bar()+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(beta_post))+geom_bar()+ggtitle("The histogram of the simulated alpha")
?geom_bar
ggplot(,aes(beta_post))+geom_bar(binwidth=10)+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(beta_post))+geom_bar(binwidth=3)+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(beta_post))+geom_bar(binwidth=3)+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(beta_post))+geom_histogram(binwidth=3)+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(beta_post))+geom_histogram(binwidth=2)+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(alpha_post))+geom_histogram(binwidth=2)+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(beta_post))+geom_histogram(binwidth=2)+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(alpha_post))+geom_histogram(binwidth=1)+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(alpha_post))+geom_histogram(binwidth=0.5)+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(beta_post))+geom_histogram(binwidth=2)+ggtitle("The histogram of the simulated beta")
?geom_histogram
ggplot(,aes(alpha_post))+geom_histogram(bins=10)+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(alpha_post))+geom_histogram(bins=15)+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(beta_post))+geom_histogram(bins=15)+ggtitle("The histogram of the simulated beta")
theta = matrix(nrow = 1000, ncol = 10)
for (i in 1:1000){
for (j in 1:10){
theta[i,j] = rbeta(1, alpha_post[i]+y[j], beta_post[i]+n[j]-y[j])
}
}
post_median = apply(theta, 2, median)
post_lower = apply(theta, 2, function(x) quantile(x, 0.025))
post_upper = apply(theta, 2, function(x) quantile(x, 0.975))
obs_prop = y/n
plot(obs_prop, post_median, ylim = c(0, 0.6))
abline(a = 0, b = 1)
w = seq(-3,1,0.1)#41
v = seq(1,6,0.1)#36
xcord = rep(w, times =length(v))
ycord = rep(v, each  =length(w))
z_raw <- mapply(a=exp(xcord+ycord)/(1+exp(xcord))  ,b=exp(ycord)/(1+exp(xcord)) ,FUN=f)
z <- z_raw/sum(z_raw)
ggplot(, aes(xcord, ycord, z = z)) + geom_tile(aes(fill = z)) + stat_contour()+
scale_fill_gradient(low="gray", high="white")
w = seq(-3,1,0.1)#41
v = seq(-1,4,0.1)#36
w = seq(-3,1,0.1)#41
v = seq(-1,4,0.1)#51
xcord = rep(w, times =length(v))
ycord = rep(v, each  =length(w))
z_raw <- mapply(a=exp(xcord+ycord)/(1+exp(xcord))  ,b=exp(ycord)/(1+exp(xcord)) ,FUN=f)
z <- z_raw/sum(z_raw)
ggplot(, aes(xcord, ycord, z = z)) + geom_tile(aes(fill = z)) + stat_contour()+
scale_fill_gradient(low="gray", high="white")
w = seq(-3,1,0.1)#41
v = seq(0,4,0.1)#41
xcord = rep(w, times =length(v))
ycord = rep(v, each  =length(w))
z_raw <- mapply(a=exp(xcord+ycord)/(1+exp(xcord))  ,b=exp(ycord)/(1+exp(xcord)) ,FUN=f)
z <- z_raw/sum(z_raw)
ggplot(, aes(xcord, ycord, z = z)) + geom_tile(aes(fill = z)) + stat_contour()+
scale_fill_gradient(low="gray", high="white")
x.m = matrix(xcord, ncol = length(w), nrow = length(v), byrow =TRUE)
y.m = matrix(ycord, ncol = length(w), nrow = length(v), byrow =TRUE)
z.m = matrix(z,     ncol = length(w), nrow = length(v), byrow =TRUE)
margin = colSums(z.m)
sum(margin)
count.alpha = rmultinom(1,size = 1000,prob=margin)
count.alpha =count.alpha
alpha.draw = rep(alpha, count.alpha)
w.draw = rep(w, count.alpha)
ggplot(,aes(w))+geom_bar()+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(w.draw))+geom_bar()+ggtitle("The histogram of the simulated alpha")
x.m = matrix(xcord, ncol = length(w), nrow = length(v), byrow =TRUE)
y.m = matrix(ycord, ncol = length(w), nrow = length(v), byrow =TRUE)
z.m = matrix(z,     ncol = length(w), nrow = length(v), byrow =TRUE)
margin = colSums(z.m)
count.alpha = rmultinom(1,size = 1000,prob=margin)
count.alpha =count.alpha
w.draw = rep(w, count.alpha)
ggplot(,aes(w.draw))+geom_bar()+ggtitle("The histogram of the simulated alpha(new)")
condition.beta = matrix(0, ncol=length(w), nrow =length(v))
for (i in 1:length(w)){
condition.beta[,i] = z.m[,i]/margin[i]
}
rep.w = rep(1:length(w), count.alpha)
count.beta = matrix(0, ncol = 1000,nrow =length(beta))
count.z = matrix(0, ncol = 1000,nrow =length(beta))
beta.draw = c()
condition.beta = matrix(0, ncol=length(w), nrow =length(v))
for (i in 1:length(w)){
condition.beta[,i] = z.m[,i]/margin[i]
}
rep.w = rep(1:length(w), count.alpha)
count.v = matrix(0, ncol = 1000,nrow =length(beta))
v.draw = c()
for (i in 1:1000){
i=1
count.v[,i] = rmultinom(1,size = 1,prob=condition.beta[,rep.w[i]])
v.draw[i] = rep(v,count.v[,i])
}
index = sample(1:length(z), 1000, prob = z, replace = TRUE)
alpha_post = xcord[index]
beta_post = ycord[index]
ggplot(,aes(alpha_post))+geom_histogram(bins=15)+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(beta_post))+geom_histogram(bins=15)+ggtitle("The histogram of the simulated beta")
ggplot(,aes(alpha_post))+geom_histogram(bins=20)+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(beta_post))+geom_histogram(bins=20)+ggtitle("The histogram of the simulated beta")
ggplot(,aes(alpha_post))+geom_histogram(bins=30)+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(beta_post))+geom_histogram(bins=30)+ggtitle("The histogram of the simulated beta")
ggplot(,aes(alpha_post))+geom_histogram(bins=25)+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(beta_post))+geom_histogram(bins=25)+ggtitle("The histogram of the simulated beta")
ggplot(,aes(alpha_post))+geom_histogram(bins=20)+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(beta_post))+geom_histogram(bins=20)+ggtitle("The histogram of the simulated beta")
ggplot(,aes(alpha_post,beta_post)) +geom_point()
plot(alpha_post,beta_post)
ggplot(, aes(xcord, ycord, z = z)) + geom_tile(aes(fill = z)) + stat_contour()+
scale_fill_gradient(low="gray", high="white")
for(i in 1:length(alpha_post)){
for(j in 1:length(y)){
theta[i,j] = rbeta(1,alpha_post[i]+y[j],beta_post[i]+n[j]-y[j])
}
}
thetaj.mean = colMeans(theta)
thetaj.tile = matrix(,ncol = 2, nrow = 10)
for(i in 1:10){
thetaj.tile[i,] = as.vector(quantile(theta[,i],probs = c(0.025, 0.975)))
}
plot(y/n, thetaj.mean, xlim=c(0,1),ylim = c(0,1))
for(i in 1:10){
lines(rep((y/n)[i],2), thetaj.tile[i,])
}
lines(c(0,1), c(0,1))
theta = c()
for (i in 1:length(alpha.simu)){
theta[i] = rbeta(1,alpha.simu[i], beta.simu[i])
}
theta = c()
for (i in 1:length(alpha_post)){
theta[i] = rbeta(1,alpha_post[i], beta_post[i])
}
y = c()
for(i in 1:1000){
y[i] = rbinom(1, 100,theta[i])
}
quantile(y, probs = c(0.025, 0.975))
?quantile
quantile(y, probs = c(0.025, 0.975),na.rm = TRUE)
theta = matrix(,ncol = length(y), nrow = length(alpha_post))
for(i in 1:length(alpha_post)){
for(j in 1:length(y)){
theta[i,j] = rbeta(1,alpha_post[i]+y[j],beta_post[i]+n[j]-y[j])
}
}
index = sample(1:length(z), 1000, prob = z, replace = TRUE)
alpha_post = xcord[index]
beta_post = ycord[index]
ggplot(,aes(alpha_post))+geom_histogram(bins=20)+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(beta_post))+geom_histogram(bins=20)+ggtitle("The histogram of the simulated beta")
ggplot(,aes(alpha_post,beta_post)) +geom_point()+
ggtitle("The scartter plot of the simulated beta")
theta = matrix(,ncol = length(y), nrow = length(alpha_post))
for(i in 1:length(alpha_post)){
for(j in 1:length(y)){
theta[i,j] = rbeta(1,alpha_post[i]+y[j],beta_post[i]+n[j]-y[j])
}
}
dim(theta )
length(y)
y
library(ggplot2)
y<-c(16,9,10, 13, 19,20, 18, 17, 35, 55)
other<-c(58,90,48, 57, 103,57, 86, 112, 273, 64)
n<- y+other
alpha <- seq(0.1,7.5,0.1)
beta <- seq(0.1,30,0.1)
#The marginal posterior density
f <-  function(a, b){
return( (a + b)^(-2.5) * prod(beta(a,b)^(-1) * beta(a+y, b+n-y)))
}
xcord = rep(alpha, times =length(beta))
ycord = rep(beta, each = length(alpha))
z_raw <- mapply(a=xcord,b=ycord,FUN=f)
z <- z_raw/sum(z_raw)
ggplot(, aes(xcord, ycord, z = z)) + geom_tile(aes(fill = z)) + stat_contour()+
scale_fill_gradient(low="gray", high="white")
w = seq(-3,1,0.1)#41
v = seq(0,4,0.1)#41
xcord = rep(w, times =length(v))
ycord = rep(v, each  =length(w))
z_raw <- mapply(a=exp(xcord+ycord)/(1+exp(xcord))  ,b=exp(ycord)/(1+exp(xcord)) ,FUN=f)
z <- z_raw/sum(z_raw)
ggplot(, aes(xcord, ycord, z = z)) + geom_tile(aes(fill = z)) + stat_contour()+
scale_fill_gradient(low="gray", high="white")
index = sample(1:length(z), 1000, prob = z, replace = TRUE)
alpha_post = xcord[index]
beta_post = ycord[index]
ggplot(,aes(alpha_post))+geom_histogram(bins=20)+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(beta_post))+geom_histogram(bins=20)+ggtitle("The histogram of the simulated beta")
ggplot(,aes(alpha_post,beta_post)) +geom_point()+
ggtitle("The scartter plot of the simulated beta")
theta = matrix(,ncol = length(y), nrow = length(alpha_post))
for(i in 1:length(alpha_post)){
for(j in 1:length(y)){
theta[i,j] = rbeta(1,alpha_post[i]+y[j],beta_post[i]+n[j]-y[j])
}
}
thetaj.mean = colMeans(theta)
thetaj.tile = matrix(,ncol = 2, nrow = 10)
for(i in 1:10){
thetaj.tile[i,] = as.vector(quantile(theta[,i],probs = c(0.025, 0.975)))
}
plot(y/n, thetaj.mean, xlim=c(0,1),ylim = c(0,1))
for(i in 1:10){
lines(rep((y/n)[i],2), thetaj.tile[i,])
}
lines(c(0,1), c(0,1))
theta = c()
for (i in 1:length(alpha_post)){
theta[i] = rbeta(1,alpha_post[i], beta_post[i])
}
y = c()
for(i in 1:1000){
y[i] = rbinom(1, 100,theta[i])
}
quantile(y, probs = c(0.025, 0.975),na.rm = TRUE)
theta = matrix(,ncol = length(y), nrow = length(alpha_post))
for(i in 1:length(alpha_post)){
for(j in 1:length(y)){
theta[i,j] = rbeta(1,alpha_post[i]+y[j],beta_post[i]+n[j]-y[j])
}
}
y<-c(16,9,10, 13, 19,20, 18, 17, 35, 55)
other<-c(58,90,48, 57, 103,57, 86, 112, 273, 64)
n<- y+other
alpha <- seq(0.1,7.5,0.1)
beta <- seq(0.1,30,0.1)
#The marginal posterior density
f <-  function(a, b){
return( (a + b)^(-2.5) * prod(beta(a,b)^(-1) * beta(a+y, b+n-y)))
}
xcord = rep(alpha, times =length(beta))
ycord = rep(beta, each = length(alpha))
z_raw <- mapply(a=xcord,b=ycord,FUN=f)
z <- z_raw/sum(z_raw)
ggplot(, aes(xcord, ycord, z = z)) + geom_tile(aes(fill = z)) + stat_contour()+
scale_fill_gradient(low="gray", high="white")
w = seq(-3,1,0.1)#41
v = seq(0,4,0.1)#41
xcord = rep(w, times =length(v))
ycord = rep(v, each  =length(w))
z_raw <- mapply(a=exp(xcord+ycord)/(1+exp(xcord))  ,b=exp(ycord)/(1+exp(xcord)) ,FUN=f)
z <- z_raw/sum(z_raw)
ggplot(, aes(xcord, ycord, z = z)) + geom_tile(aes(fill = z)) + stat_contour()+
scale_fill_gradient(low="gray", high="white")
index = sample(1:length(z), 1000, prob = z, replace = TRUE)
alpha_post = xcord[index]
beta_post = ycord[index]
ggplot(,aes(alpha_post))+geom_histogram(bins=20)+ggtitle("The histogram of the simulated alpha")
ggplot(,aes(beta_post))+geom_histogram(bins=20)+ggtitle("The histogram of the simulated beta")
ggplot(,aes(alpha_post,beta_post)) +geom_point()+
ggtitle("The scartter plot of the simulated beta")
theta = matrix(,ncol = length(y), nrow = length(alpha_post))
for(i in 1:length(alpha_post)){
for(j in 1:length(y)){
theta[i,j] = rbeta(1,alpha_post[i]+y[j],beta_post[i]+n[j]-y[j])
}
}
summary(theta)
thetaj.mean = colMeans(theta)
thetaj.tile = matrix(,ncol = 2, nrow = 10)
for(i in 1:10){
thetaj.tile[i,] = as.vector(quantile(theta[,i],probs = c(0.025, 0.975)))
}
plot(y/n, thetaj.mean, xlim=c(0,1),ylim = c(0,1))
for(i in 1:10){
lines(rep((y/n)[i],2), thetaj.tile[i,])
}
lines(c(0,1), c(0,1))
pred = c()
for(i in 1:1000){
pred[i] = rbinom(1, 100,theta[i,])
}
quantile(pred, probs = c(0.025, 0.975),na.rm = TRUE)
pred = c()
for(i in 1:1000){
pred[i] = rbinom(1, 1,theta[i,])
}
quantile(pred, probs = c(0.025, 0.975),na.rm = TRUE)
pred = c()
for(i in 1:1000){
pred[i] = rbinom(1, 100,theta[i,])
}
quantile(pred, probs = c(0.025, 0.975),na.rm = TRUE)
quantile(pred/100, probs = c(0.025, 0.975),na.rm = TRUE)
qt =quantile(pred/100, probs = c(0.025, 0.975),na.rm = TRUE)
mean = alpha_post/(alpha_post+beta_post)
quantile(mean, probs = c(0.025,0.975))
mean = alpha_post/(alpha_post+beta_post)
summary(mean)
summary(alpha_post)
summary(beta_post)
?quantile
quantile(mean, probs = c(0.025,0.975),na.rm=TRUE)
quantile(theta, probs = c(0.025,0.975))
suppressPackageStartupMessages({
library(recommenderlab)
library(dplyr)
library(ggplot2)
})
setwd("~/GitHub/P2_Recom_Sys_MovieLens/Exploration/David")
load("./data/udata.Rda")
Unique_id <-unique(udata$User_id)
id_count<- function(id) {
return(dim(udata[udata$User_id==id ,])[1])
}
count_result<-sapply(X=Unique_id,FUN=id_count)
count_result_df <- data.frame(count_result)
colnames(count_result_df)[1] <-"Numb_of_Movies"
count_result_df$id <- rownames(count_result_df)
movie_numb_median <- median(count_result_df$Numb_of_Movies)
p1 <-ggplot(count_result_df, aes(Numb_of_Movies)) +geom_histogram(binwidth = 3)+
geom_vline(xintercept = movie_numb_median,colour="steelblue",linetype = "longdash")+
ggtitle("Histogram of movie counts(bw=3)")
u_id_1<-count_result_df[count_result_df$Numb_of_Movies<66,]$id
u_id_2<-count_result_df[count_result_df$Numb_of_Movies>65,]$id
ggplot(count_result_df, aes(Numb_of_Movies)) +geom_histogram(binwidth = 1)+
geom_vline(xintercept = movie_numb_median,colour="steelblue",linetype = "longdash")+
geom_vline(xintercept = 100,colour="red",linetype = "longdash")+
ggtitle("Histogram of movie counts(bw=3)")
ggplot(count_result_df, aes(Numb_of_Movies)) +geom_histogram(binwidth = 3)+
geom_vline(xintercept = movie_numb_median,colour="steelblue",linetype = "longdash")+
geom_vline(xintercept = 100,colour="red",linetype = "longdash")+
ggtitle("Histogram of movie counts(bw=3)")
Unique_Mid <-unique(udata$Item_id)
id_Mcount<- function(id) {
return(dim(udata[udata$Item_id==id ,])[1])
}
dim(udata[udata$Item_id==1,])
count_Mresult<-sapply(X=Unique_Mid,FUN=id_Mcount)
head(count_Mresult)
head(Unique_Mid )
count_Mresult_df <- data.frame(count_Mresult)
colnames(count_Mresult_df)[1] <-"Numb_of_Ratings"
count_Mresult_df$ItemId <- Unique_Mid
ggplot(count_Mresult_df, aes(Numb_of_Ratings)) +geom_histogram(binwidth = 3)+
ggtitle("Histogram of Rating counts(bw=3)")
reorder_countM<- count_Mresult_df[order(-count_Mresult_df$Numb_of_Ratings),]
countM_100<-reorder_countM[1:100,]
range(countM_100$Numb_of_Ratings)
head(countM_100)
countM_100
rownames(countM_100)
rownames(countM_100) <- NULL
countM_100
ggplot(countM_100, aes(Numb_of_Ratings)) +geom_histogram(bins = 20)+
ggtitle("Histogram of Rating counts(bin=20)")
range(countM_100$Numb_of_Ratings)
MV_100Id<-countM_100$ItemId
MV_100Id
User_M100 <- udata[udata$Item_id==MV_100Id,]$User_id
length(unique(User_M100))
udata[udata$Item_id==1,]$User_id
length(unique(udata[udata$Item_id==1,]$User_id))
User_M100 <- udata[udata$Item_id %in% MV_100Id,]$User_id
length(unique(User_M100))
userId_M<-function(Movie_id){
return( udata[udata$Item_id==Movie_id,]$User_id )
}
count_result<-sapply(X=User_M100,FUN=userId_M)
userId_M(1)
User_M100
MV_100Id
userId_M(50)
length(userId_M(50))
range(countM_100$Numb_of_Ratings)
User_M100 <- udata[udata$Item_id %in% MV_100Id,]$User_id
length(unique(User_M100))
userId_M<-function(Movie_id){
return( udata[udata$Item_id==Movie_id,]$User_id )
}
movie_user_table <-sapply(X=MV_100Id,FUN=userId_M)
movie_user_table
str(movie_user_table)
countM_100
rating_mat <- matrix(data=rep(0,943*100),nrow=100,ncol=943)
View(rating_mat)
rating_mat[i,4]
i=1
rating_mat[i,4]
movie_user_table[[i]]
str(movie_user_table[[i]])
for(i in 1:100){
for(j in 1:943){
if(j %in% movie_user_table[[i]])
rating_mat[i,j]=1
}
}
image(rating_mat)
image(rating_mat[,order(apply(rating_mat,2,sum))])
rating_mat[1,]
sum(rating_mat[1,])
sum(rating_mat[2,])
sum(rating_mat[3,])
heatmap(rating_mat)
plot(rating_mat)
range(countM_100$Numb_of_Ratings)
MV_100Id
length(unique(User_M100))
